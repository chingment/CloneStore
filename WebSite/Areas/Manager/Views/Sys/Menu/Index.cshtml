@model WebSite.Areas.Manager.Models.Menu.MenuModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Manager/Views/Shared/_LayoutHomeMainTree.cshtml";

}
@section scripts{
    <script src="~/Areas/Manager/Scripts/jquery.formValidator.js"></script>
    <script src="~/Areas/Manager/Scripts/jquery.formValidatorRegex.js"></script>
    <script type="text/javascript">
        //设置菜单树形属性
        var setting = {
            view: {
                showLine: true,
                selectedMulti: false
            },
            data: {
                simpleData: {
                    enable: true
                },
                key: {
                    url: "_url"
                }
            },
            callback: {
                onClick: onClick
            },
            async: {
                url: ""
            }

        };

        var num = 0;
        var maxMum = 2;
        function getChildNodeGrade(treeNode) {
            var p = treeNode.getParentNode();
            if (p != null) {
                num += 1;
                getChildNodeGrade(p);
            }
        }

        function onClick(event, treeId, treeNode, clickFlag) {
            $("#txt_PName").defaultPassed();
            $("#txt_Name").defaultPassed();

            var parentName = "/";
            if (treeNode.getParentNode() != null) {
                parentName = treeNode.getParentNode().name;
                $("#btn_delete").show();
            }
            else {
                $("#btn_delete").hide();
            }

            /*最大支持几级菜单由maxMum决定 可修改这个值*/
            num = 0;
            getChildNodeGrade(treeNode);
            if (num >= maxMum) {
                $("#btn_add").hide();
            }
            else {
                $("#btn_add").show();
            }

            $.lumos.postJson({
                url: "../Menu/GetDetail",
                data: { menuId: treeNode.id },
                success: function (data) {

                    if (data.result == "Success") {
                        $("#lbl_PName").text(parentName);
                        $("#txt_PName").val(parentName);
                        var menu = data.content;
                        $("#txt_Name").val(menu.Name);
                        $("#txt_Url").val(menu.Url);
                        $("#txt_Description").val(menu.Description);


                        $("input[name=Permission]").attr("checked", false);

                        var menuPermission = menu.SysMenuPermission

                        for (var i = 0; i < menuPermission.length; i++) {
                            $("input[name=Permission][value=" + menuPermission[i].PermissionId + "]").attr("checked", true);
                        }

                    }
                }
            });

        }

        function getSelectedNode() {
            var selObj = zTree.getSelectedNodes();
            if ($.lumos.isNullOrEmpty(selObj)) {
                art.dialog.tips("Please select the node on the left");
                return null;
            }
            return selObj[0];
        }

        var zTree;
        $(this).ready(function () {

            $(".tab").tab();

            loadTreeList();

            //表单验证处理
            $.formValidator.initConfig({ formID: "form1", onError: function (msg) { }, onSuccess: function () { return update(); } });
            $("#txt_Name").formValidator({ onShow: "&nbsp;", onFocus: "Required,no more than 20 char", onCorrect: "&nbsp;" }).inputValidator({ min: 1, max: 20, onError: "Required,no more than 20 char" });
            $("#txt_Url").formValidator({ onShow: "&nbsp;", onFocus: "No more than 200 char", onCorrect: "&nbsp;", empty: true, onEmpty: "&nbsp;" }).inputValidator({ min: 0, max: 200, onError: "No more than 200 char" });
            $("#txt_Description").formValidator({ onShow: "&nbsp;", onFocus: "No more than 500 char", onCorrect: "&nbsp;", empty: true, onEmpty: "&nbsp;" }).inputValidator({ min: 0, max: 500, onError: "No more than 500 char" });
            //处理添加按钮
            $("#btn_add").click(function () {
                var selObj = getSelectedNode();
                if (selObj == null) {
                    return;
                }

                $.lumos.openDialog('../Menu/Add?id=' + selObj.id + '&pName=' + escape(selObj.name), 'New', '700px', '480px');
            });


            //处理删除按钮
            $("#btn_delete").click(function () {

                var selObj = getSelectedNode();
                if (selObj == null) {
                    return;
                }

                var l_txt = $("#txt_PName").val();
                if (l_txt == "/") {
                    art.dialog.tips("Root node cannot be deleted");
                    return;
                }

                art.dialog.confirm(
                    "Confirm Delete [" + selObj.name + "] the node and it's children？",
                    function () {
                        var id = selObj.id;
                        var data = [];
                        var nodes = zTree.getSelectedNodeFollowChildren();
                        $.each(nodes, function (i, n) {
                            data.push({ name: "id", value: n.id });
                        });

                        $.lumos.postJson({
                            url: "../Menu/Delete",
                            data: data,
                            success: function (data) {
                                art.dialog.tips(data.message);
                                loadTreeList(id);
                            }
                        });
                        return true;
                    });
                return false;
            });

            $("#btn_sort").click(function () {
                var selObj = getSelectedNode();
                if (selObj == null) {
                    return;
                }

                if (typeof selObj.children == "undefined") {
                    art.dialog.tips("The Node does not have a child node");
                    return;
                }

                $.lumos.openDialog('../Menu/Sort?id=' + selObj.id + '&pName=' + escape(selObj.name), '【Sort】', '650px', '420px');

            });

        });

        function update() {
            var selObj = getSelectedNode();
            if (selObj == null) {
                return false;
            }

            var id = selObj.id;
            var postData = $("#form1").serializeArray();

            postData.push({ name: "Id", value: id });
            $.lumos.postJson({
                url: "../Menu/Update",
                data: postData,
                success: function (data) {
                    art.dialog.tips(data.message);
                    loadTreeList(id);
                }
            });


            return false;
        }

        function loadTreeList(id) {

            $.lumos.postJson({
                url: "../Menu/GetTree?pId=0",
                success: function (data) {
                    var obj = data.content;
                    zTree = $.fn.zTree.init($("#treemenu"), setting, obj);
                    var node = zTree.getNodeByParam("id", id, null);
                    zTree.selectNode(node);
                }
            });
        }

    </script>
}

<form name="form1" id="form1">
    @Html.AntiForgeryToken()
    <dl class="tree-tab">
        <dd class="tree-tab-left">
            <ul id="treemenu" class="ztree"></ul>
        </dd>
        <dd class="tree-tab-right">
            <div class="tab" id="tab1">
                <div class="tab-item">
                    <ul>
                        <li class="item First selected"><a href="javascript:void(0)">Basic information</a></li>
                    </ul>
                </div>
                <div class="tab-content">
                    <div class="subcontent">
                        <div class="f-btn-area">
                            <input type="button" class="btn btn-add" id="btn_add" value="New" style="margin-right:5px;" />
                            <input type="button" class="btn btn-delete" id="btn_delete" value="Delete" />
                            <input type="button" class="btn btn-sort" id="btn_sort" value="Modified Sort" />
                        </div>
                        <table class="f-tb" cellpadding="0" cellspacing="1">
                            <tr>
                                <td class="f-tb-t">
                                    ParentName：
                                </td>
                                <td class="f-tb-c">
                                    <label id="lbl_PName">/</label>
                                    <input name="txt_PName" type="hidden" id="txt_PName" />
                                    <input name="txt_PId" type="hidden" id="txt_PId" />
                                </td>
                            </tr>
                            <tr>
                                <td class="f-tb-t">
                                    Name：
                                </td>
                                <td class="f-tb-c">
                                    <input name="Name" type="text" autocomplete="off" id="txt_Name" style="width: 250px;" class="input-control" />
                                    <span id="txt_NameTip"></span>
                                </td>
                            </tr>
                            <tr class="tr_url">
                                <td class="f-tb-t">
                                    Url：
                                </td>
                                <td class="f-tb-c">
                                    <input name="Url" type="text" autocomplete="off" id="txt_Url"
                                           class="input-control" style="width: 350px;" />
                                    <span id="txt_UrlTip"></span>
                                </td>
                            </tr>
                            <tr>
                                <td class="f-tb-t">
                                    Permissions：
                                </td>
                                <td class="f-tb-c">
                                    @for (int i = 0; i < Model.SysPermission.Count; i++)
                                    {
                                        if (Model.SysPermission[i].Id != "1")
                                        {
                                            <span>
                                                <input id="cb_Permission_@i" type="checkbox" name="Permission" value="@Model.SysPermission[i].Id" />
                                                <label for="cb_Permission_@i">@Model.SysPermission[i].Name</label>
                                            </span>
                                        }
                                    }

                                </td>
                            </tr>
                            <tr>
                                <td class="f-tb-t">
                                    Remarks：
                                </td>
                                <td class="f-tb-c">
                                    <textarea name="Description" rows="5" cols="46" id="txt_Description" class="input-control"></textarea>
                                    <span id="txt_DescriptionTip"></span>
                                  </td>
                            </tr>
                            <tr>
                                <td class="f-tb-t">
                                    &nbsp;
                                </td>
                                <td class="f-tb-c">
                                    <input type="submit" name="btn_Save" value="Save" id="btn_Save" class="btn btn-save" />
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </dd>
    </dl>
</form>
